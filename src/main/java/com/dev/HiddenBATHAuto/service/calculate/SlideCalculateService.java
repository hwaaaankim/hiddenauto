package com.dev.HiddenBATHAuto.service.calculate;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.dev.HiddenBATHAuto.model.calculate.slide.SlideBasicPrice;
import com.dev.HiddenBATHAuto.model.calculate.slide.SlideOptionPrice;
import com.dev.HiddenBATHAuto.model.nonstandard.Product;
import com.dev.HiddenBATHAuto.repository.caculate.slide.SlideBasicPriceRepository;
import com.dev.HiddenBATHAuto.repository.caculate.slide.SlideOptionPriceRepository;
import com.dev.HiddenBATHAuto.repository.nonstandard.ProductRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class SlideCalculateService {

    private final ProductRepository productRepository;
    private final SlideBasicPriceRepository slideBasicPriceRepository;
    private final SlideOptionPriceRepository slideOptionPriceRepository;

    public Map<String, Object> calculate(Map<String, Object> selection) {
        int mainPrice = 0;
        List<String> reasons = new ArrayList<>();

        Long productId = Long.parseLong(String.valueOf(selection.get("product")));
        Product product = productRepository.findById(productId).orElse(null);

        if (product == null) {
            reasons.add("Ï†úÌíà Ï°∞Ìöå Ïã§Ìå®");
            return Map.of("mainPrice", 0, "variablePrice", 0, "reasons", reasons);
        }

        String productName = product.getName();
        int basicWidth = product.getBasicWidth();
        int basicHeight = product.getBasicHeight();
        int basicDepth = product.getBasicDepth();
        reasons.add("Í∏∞Î≥∏ ÏÇ¨Ïù¥Ï¶à: W" + basicWidth + ", H" + basicHeight + ", D" + basicDepth);

        SlideBasicPrice basicPrice = slideBasicPriceRepository.findByProductName(productName).orElse(null);
        if (basicPrice == null) {
            reasons.add("Í∏∞Î≥∏ Í∞ÄÍ≤© Ï†ïÎ≥¥ ÏóÜÏùå: " + productName);
            return Map.of("mainPrice", 0, "variablePrice", 0, "reasons", reasons);
        }

        int base = basicPrice.getBasicPrice();
        reasons.add("Í∏∞Î≥∏ Í∞ÄÍ≤© Ï°∞ÌöåÎê®: " + base);

        // ÏÇ¨Ïù¥Ï¶à ÌååÏã±
        int width = 0, height = 0, depth = 0;
        String sizeStr = (String) selection.get("size");
        if (sizeStr != null) {
            try {
                String[] parts = sizeStr.split(",");
                width = Integer.parseInt(parts[0].replaceAll("[^0-9]", ""));
                height = Integer.parseInt(parts[1].replaceAll("[^0-9]", ""));
                depth = Integer.parseInt(parts[2].replaceAll("[^0-9]", ""));
            } catch (Exception e) {
                reasons.add("ÏÇ¨Ïù¥Ï¶à ÌååÏã± Ïã§Ìå®");
            }
        }

        // ÎÑìÏù¥ Ï¶ùÍ∞Ä Í≥ÑÏÇ∞
        int materialWidth = ((basicWidth + 99) / 100) * 100;
        int inputWidth = ((width + 99) / 100) * 100;
        int widthDiff = inputWidth - materialWidth;
        if (widthDiff > 0) {
            int over1500 = Math.max(0, inputWidth - 1500);
            int under1500 = widthDiff - over1500;
            int widthCost = (under1500 / 100) * 15000 + (over1500 / 100) * 20000;
            base += widthCost;
            reasons.add("ÎÑìÏù¥ Í∏∞Ï§Ä: " + materialWidth + " ‚Üí ÏûÖÎ†•Í∞í: " + width + ", Ï†àÏÇ¨: " + inputWidth + ", Ï¥àÍ≥º: " + widthDiff + " ‚Üí Ï∂îÍ∞ÄÍ∏à: " + widthCost);
        } else {
            reasons.add("ÎÑìÏù¥ Ï¥àÍ≥º ÏóÜÏùå");
        }

        // ÎÜíÏù¥ Ï¶ùÍ∞Ä Í≥ÑÏÇ∞
        int materialHeight = ((basicHeight + 99) / 100) * 100;
        int inputHeight = ((height + 99) / 100) * 100;
        int heightDiff = inputHeight - materialHeight;
        if (heightDiff > 0) {
            int heightCost = (heightDiff / 100) * 20000;
            base += heightCost;
            reasons.add("ÎÜíÏù¥ Í∏∞Ï§Ä: " + materialHeight + " ‚Üí ÏûÖÎ†•Í∞í: " + height + ", Ï†àÏÇ¨: " + inputHeight + ", Ï¥àÍ≥º: " + heightDiff + " ‚Üí Ï∂îÍ∞ÄÍ∏à: " + heightCost);
        } else {
            reasons.add("ÎÜíÏù¥ Ï¥àÍ≥º ÏóÜÏùå");
        }

        // ÍπäÏù¥ Í≥ÑÏÇ∞
        if (depth > basicDepth) {
            int increased = (int) Math.round(base * 1.5);
            reasons.add("ÍπäÏù¥ Í∏∞Ï§Ä: " + basicDepth + " ‚Üí ÏûÖÎ†•Í∞í: " + depth + ", Ï¶ùÍ∞ÄÎ°ú 1.5Î∞∞ Ï†ÅÏö©Îê®");
            base = increased;
        } else if (depth < basicDepth) {
            base += 30000;
            reasons.add("ÍπäÏù¥ Í∏∞Ï§Ä: " + basicDepth + " ‚Üí ÏûÖÎ†•Í∞í: " + depth + ", Í∞êÏÜåÎ°ú 3ÎßåÏõê Ï∂îÍ∞ÄÎê®");
        } else {
            reasons.add("ÍπäÏù¥ Í∏∞Ï§Ä: " + basicDepth + " ‚Üí ÏûÖÎ†•Í∞í: " + depth + ", ÍπäÏù¥ ÎèôÏùº ‚Üí Ï∂îÍ∞ÄÍ∏à ÏóÜÏùå");
        }

        // üö™ Door ÏòµÏÖò
        String door = String.valueOf(selection.get("door"));
        if ("not_add".equals(door)) {
            base = (int) Math.round(base * 0.5);
            reasons.add("Î¨∏ ÏòµÏÖò: ÎØ∏Ìè¨Ìï® (50% Ï†ÅÏö©)");
        } else {
            reasons.add("Î¨∏ ÏòµÏÖò: Ìè¨Ìï®Îê®");
        }

        int variablePrice = base;

        // LED
        if ("add".equals(selection.get("led"))) {
            String pos = String.valueOf(selection.get("ledPosition"));
            int ledCount = ("5".equals(pos)) ? 2 : 1;
            SlideOptionPrice op = slideOptionPriceRepository.findByOptionName("ÌïòÎ∂ÄLED").orElse(null);
            if (op != null) {
                int added = ledCount * op.getPrice();
                variablePrice += added;
                reasons.add("LED ÏàòÎüâ: " + ledCount + ", Îã®Í∞Ä: " + op.getPrice() + " ‚Üí Ï∂îÍ∞ÄÍ∏à: " + added);
            }
        } else {
            reasons.add("LED ÏÑ†ÌÉù ÏïàÎê®");
        }

        // Í∏∞ÌÉÄ ÏòµÏÖò
        variablePrice += addOption(selection, "outletPosition", "ÏΩòÏÑºÌä∏", reasons);
        variablePrice += addOption(selection, "dryPosition", "ÎìúÎùºÏù¥Í±∏Ïù¥", reasons);
        variablePrice += addOption(selection, "tissuePosition", "Ìã∞ÏäàÌôÄÏ∫°", reasons);

        // ÏÜêÏû°Ïù¥
        if ("add".equals(selection.get("handle"))) {
            String handleType = String.valueOf(selection.get("handletype"));
            reasons.add("ÏÜêÏû°Ïù¥ Ï∂îÍ∞ÄÎê® (Ï¢ÖÎ•ò: " + handleType + ")");
        } else {
            reasons.add("ÏÜêÏû°Ïù¥ Ï∂îÍ∞Ä ÏóÜÏùå");
        }

        Map<String, Object> result = new HashMap<>();
        result.put("mainPrice", variablePrice);
        result.put("variablePrice", variablePrice);
        result.put("reasons", reasons);
        return result;
    }

    private int addOption(Map<String, Object> selection, String key, String label, List<String> reasons) {
        Object val = selection.get(key);
        if (val == null || "7".equals(String.valueOf(val))) {
            reasons.add(label + " ÏÑ†ÌÉù ÏïàÎê®");
            return 0;
        }
        SlideOptionPrice op = slideOptionPriceRepository.findByOptionName(label).orElse(null);
        if (op != null) {
            reasons.add(label + " Í∞ÄÍ≤© Ï†ÅÏö©Îê®: " + op.getPrice());
            return op.getPrice();
        } else {
            reasons.add(label + " Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå®");
            return 0;
        }
    }
}