package com.dev.HiddenBATHAuto.service.calculate;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesEightRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesElevenRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesFiveLedRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesFiveRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesFourLedRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesFourRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesNineRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesOneLedRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesOneRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesSevenRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesSixLedRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesSixRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesTenRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesThreeLedRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesThreeRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesTwoLedRepository;
import com.dev.HiddenBATHAuto.repository.caculate.mirror.MirrorSeriesTwoRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MirrorDynamicPriceService {

	private final MirrorSeriesOneRepository mirrorSeriesOneRepository;
    private final MirrorSeriesOneLedRepository mirrorSeriesOneLedRepository;
    private final MirrorSeriesTwoRepository mirrorSeriesTwoRepository;
    private final MirrorSeriesTwoLedRepository mirrorSeriesTwoLedRepository;
    private final MirrorSeriesThreeRepository mirrorSeriesThreeRepository;
    private final MirrorSeriesThreeLedRepository mirrorSeriesThreeLedRepository;
    private final MirrorSeriesFourRepository mirrorSeriesFourRepository;
    private final MirrorSeriesFourLedRepository mirrorSeriesFourLedRepository;
    private final MirrorSeriesFiveRepository mirrorSeriesFiveRepository;
    private final MirrorSeriesFiveLedRepository mirrorSeriesFiveLedRepository;
    private final MirrorSeriesSixRepository mirrorSeriesSixRepository;
    private final MirrorSeriesSixLedRepository mirrorSeriesSixLedRepository;
    private final MirrorSeriesSevenRepository mirrorSeriesSevenRepository;
    private final MirrorSeriesEightRepository mirrorSeriesEightRepository;
    private final MirrorSeriesNineRepository mirrorSeriesNineRepository;
    private final MirrorSeriesTenRepository mirrorSeriesTenRepository;
    private final MirrorSeriesElevenRepository mirrorSeriesElevenRepository;

    public Map<String, Object> calculateUnstandardMirror(String productName, int width, int height, boolean led, List<String> reasons) {
        int baseWidth = mapToStandard(width);
        int baseHeight = mapToStandard(height);

        reasons.add("üì• ÏûÖÎ†• ÏÇ¨Ïù¥Ï¶à: W" + width + " / H" + height);
        reasons.add("üìê Í∏∞Ï§Ä ÏÇ¨Ïù¥Ï¶àÎ°ú Îß§Ìïë: W" + baseWidth + " / H" + baseHeight);
        reasons.add("‚ö†Ô∏è Í∑úÍ≤© ÏÇ¨Ïù¥Ï¶à Î∂àÏùºÏπò ‚Üí ÎπÑÍ∑úÍ≤© Í∞ÄÍ≤© Ï†ÅÏö©");

        String lowerName = productName.toLowerCase();
        int basePrice = 0;
        int ledPrice = 0;

        try {
            if (lowerName.contains("hd 100") || lowerName.contains("hd 101")) {
                reasons.add("üîç ÏãúÎ¶¨Ï¶à: Î¨¥Í¥Ä (HD 100 / HD 101)");
                basePrice = 150000;
                int wDiff = Math.max(0, (width - 600 + 99) / 100);
                int hDiff = Math.max(0, (height - 800 + 99) / 100);
                int extra = (wDiff + hDiff) * 5000;
                reasons.add("üîß W/H Ï¶ùÍ∞ÄÎ∂Ñ 100mm Îãπ 5000Ïõê Ï∂îÍ∞Ä x " + (wDiff + hDiff) + " = " + extra);
                basePrice += extra;
                reasons.add("üí∞ Í∏∞Î≥∏ Í∞ÄÍ≤©: 150000 + Ï∂îÍ∞ÄÍ∏à " + extra + " = " + basePrice);
            } else if (lowerName.contains("ÎàÑÎìú")) {
                reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à01");
                basePrice = getPriceFromRepository(mirrorSeriesOneRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à01", reasons);
                if (led) {
                    ledPrice = getPriceFromRepository(mirrorSeriesOneLedRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à01_LED", reasons);
                }
            } else if (lowerName.contains("Îü≠ÏÖîÎ¶¨Í∞ÅÎ©¥")) {
                reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à02");
                basePrice = getPriceFromRepository(mirrorSeriesTwoRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à02", reasons);
                if (led) {
                    ledPrice = getPriceFromRepository(mirrorSeriesTwoLedRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à02_LED", reasons);
                }
            } else if (lowerName.contains("Îü≠ÏÖîÎ¶¨ÏÇ¨Í∞Å") || lowerName.contains("Ï•¨ÏñºÎ¶¨")) {
                reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à03");
                basePrice = getPriceFromRepository(mirrorSeriesThreeRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à03", reasons);
                if (led) {
                    ledPrice = getPriceFromRepository(mirrorSeriesThreeLedRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à03_LED", reasons);
                }
            } else if (lowerName.contains("ÏÇ¨Ïù¥ÌÅ¥")) {
                reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à04");
                basePrice = getPriceFromRepository(mirrorSeriesFourRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à04", reasons);
                if (led) {
                    ledPrice = getPriceFromRepository(mirrorSeriesFourLedRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à04_LED", reasons);
                }
            } else if (lowerName.contains("Ïä¨Î¶ºÍ∞ÅÎ©¥")) {
                reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à05");
                basePrice = getPriceFromRepository(mirrorSeriesFiveRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à05", reasons);
                if (led) {
                    ledPrice = getPriceFromRepository(mirrorSeriesFiveLedRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à05_LED", reasons);
                }
            } else if (lowerName.contains("Ïä¨Î¶ºÏÇ¨Í∞Å")) {
                reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à06");
                basePrice = getPriceFromRepository(mirrorSeriesSixRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à06", reasons);
                if (led) {
                    ledPrice = getPriceFromRepository(mirrorSeriesSixLedRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à06_LED", reasons);
                }
            } else if (lowerName.contains("ÏãúÌã∞ ÏõêÌòï") || lowerName.contains("ÏãúÌã∞ÏõêÌòï")) {
                if (led) {
                    reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à08 (LED)");
                    basePrice = getPriceFromRepository(mirrorSeriesEightRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à08", reasons);
                } else {
                    reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à07 (ÎπÑLED)");
                    basePrice = getPriceFromRepository(mirrorSeriesSevenRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à07", reasons);
                }
            } else if (lowerName.contains("ÏãúÌã∞ Ìä∏Îûô")) {
                if (led) {
                    reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à09 (LED)");
                    basePrice = getPriceFromRepository(mirrorSeriesNineRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à09", reasons);
                } else {
                    reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à07 (ÎπÑLED)");
                    basePrice = getPriceFromRepository(mirrorSeriesSevenRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à07", reasons);
                }
            } else if (lowerName.contains("ÌîÑÎ°úÏ†ùÌä∏") && productName.contains("5T")) {
                if (led) {
                    reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à10 (LED)");
                    basePrice = getPriceFromRepository(mirrorSeriesTenRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à10", reasons);
                } else {
                    reasons.add("üîç ÏãúÎ¶¨Ï¶à: ÏãúÎ¶¨Ï¶à11 (ÎπÑLED)");
                    basePrice = getPriceFromRepository(mirrorSeriesElevenRepository.findByStandardWidth(baseWidth), baseHeight, "ÏãúÎ¶¨Ï¶à11", reasons);
                }
            } else {
                reasons.add("‚ùå ÏãúÎ¶¨Ï¶à Îß§Ïπ≠ Ïã§Ìå® - Ìï¥Îãπ Ï†úÌíà Ï°∞Í±¥ ÏóÜÏùå");
            }

        } catch (Exception e) {
            reasons.add("‚ùå Í∞ÄÍ≤© Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù: " + e.getMessage());
        }

        if (ledPrice > 0) reasons.add("üí° LED Ï∂îÍ∞Ä Í∏àÏï°: " + ledPrice + "Ïõê");
        reasons.add("üí≤ ÏµúÏ¢Ö Í∞ÄÍ≤© (Í∏∞Î≥∏ + LED): " + (basePrice + ledPrice) + "Ïõê");

        Map<String, Object> result = new HashMap<>();
        result.put("mainPrice", basePrice + ledPrice);
        result.put("variablePrice", basePrice + ledPrice);
        return result;
    }

    private int getPriceFromRepository(Object entity, int height, String label, List<String> reasons) {
        if (entity == null) {
            reasons.add("[" + label + "] Í∏∞Ï§Ä ÎÑìÏù¥ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå");
            return 0;
        }
        try {
            String colName = "price" + height;
            int price = (int) entity.getClass().getMethod("get" + capitalize(colName)).invoke(entity);
            reasons.add("[" + label + "] Í∏∞Ï§Ä ÎÑàÎπÑÏóêÏÑú H" + height + " ‚Üí Í∞ÄÍ≤©: " + price + "Ïõê");
            return price;
        } catch (Exception e) {
            reasons.add("[" + label + "] H" + height + "Ïóê ÎåÄÌïú Í∞ÄÍ≤© Ï°∞Ìöå Ïã§Ìå®");
            return 0;
        }
    }

    private int mapToStandard(int size) {
        return ((size + 99) / 100) * 100;
    }

    private String capitalize(String str) {
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
}
